import matplotlib.pyplot as plt
import numpy as np
from recognition.face_recognition import train_generator
import glob
from PIL import Image


# import tensorflow as tf
# import keras.backend as K


def load_image(filepath, input_shape):
    image = Image.open(filepath)
    if image.mode != 'RGB':
        image = image.convert('RGB')
    image = image.resize(input_shape)
    return np.array(image) / 255


def show_faces():
    size = 96
    generator, _ = train_generator("recognition/data", (size, size), 2, 20, test_size=0)
    nrows = 5
    ncols = 8
    f, ax = plt.subplots(nrows, ncols)
    images = next(generator)[0]
    for i in range(40):
        ax[i % nrows, i % ncols].axis('off')
        ax[i % nrows, i % ncols].imshow(images[i])
    plt.subplots_adjust(top=1, bottom=0, left=0, right=1, wspace=0, hspace=0)
    plt.show()


def show_augmented():
    size = 96
    nrows = 8
    ncols = 10
    f, ax = plt.subplots(nrows, ncols)
    labels = glob.glob("recognition/augmented_data/*")[:nrows]
    for row, label in enumerate(labels):
        for col in range(ncols):
            ax[row, ncols - col - 1].axis('off')
            ax[row, ncols - col - 1].imshow(load_image(label + "/{}.jpg".format(col + 1), (size, size)))
    plt.subplots_adjust(top=1, bottom=0, left=0, right=1, wspace=0, hspace=0)
    plt.show()


def plot_classifiers():

    # Inception ResNet v2
    # rnn04 = [0.9832402234636871, 0.994413407821229, 0.9720670391061452, 0.9888268156424581, 0.994413407821229, 0.9832402234636871, 0.9832402234636871, 0.9776536312849162, 0.994413407821229, 0.9832402234636871]
    # rnn05 = [1.0, 1.0, 0.9888268156424581, 0.994413407821229, 0.994413407821229, 1.0, 0.9888268156424581, 0.9888268156424581, 1.0, 0.9832402234636871]
    # rnn07 = [0.994413407821229, 1.0, 1.0, 1.0, 1.0, 1.0, 0.994413407821229, 0.994413407821229, 1.0, 0.9888268156424581]
    # knn5 = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.994413407821229, 0.994413407821229, 1.0, 0.9888268156424581]
    # svm = [1.0, 1.0, 0.994413407821229, 1.0, 1.0, 1.0, 0.994413407821229, 0.994413407821229, 1.0, 0.9888268156424581]

    # ResNet50
    # rnn04 = [0.4692737430167598, 0.4860335195530726, 0.48044692737430167, 0.5083798882681564, 0.5307262569832403, 0.547486033519553, 0.5865921787709497, 0.6145251396648045, 0.5754189944134078, 0.547486033519553]
    # rnn05 = [0.46368715083798884, 0.441340782122905, 0.4860335195530726, 0.5139664804469274, 0.5027932960893855, 0.5027932960893855, 0.5307262569832403, 0.5754189944134078, 0.5642458100558659, 0.4860335195530726]
    # rnn07 = [0.39106145251396646, 0.4301675977653631, 0.441340782122905, 0.4860335195530726, 0.43575418994413406, 0.48044692737430167, 0.4972067039106145, 0.553072625698324, 0.5139664804469274, 0.44692737430167595]
    # knn5 = [0.6368715083798883, 0.7206703910614525, 0.664804469273743, 0.7094972067039106, 0.664804469273743, 0.659217877094972, 0.7094972067039106, 0.7653631284916201, 0.7821229050279329, 0.6871508379888268]
    # svm = [0.7653631284916201, 0.776536312849162, 0.7262569832402235, 0.7374301675977654, 0.7430167597765364, 0.7318435754189944, 0.7486033519553073, 0.7877094972067039, 0.7988826815642458, 0.7821229050279329]

    # Xception
    rnn04 = [1.0, 1.0, 1.0, 1.0, 0.994413407821229, 1.0, 1.0, 1.0, 0.9888268156424581, 1.0]
    rnn05 = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9888268156424581, 1.0]
    rnn07 = [1.0, 1.0, 0.994413407821229, 0.994413407821229, 0.994413407821229, 1.0, 1.0, 1.0, 0.994413407821229, 1.0]
    knn5 = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.994413407821229, 1.0]
    svm = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.994413407821229, 1.0]


    labels = [
        "r-NN, r=0.4", "r-NN, r=0.5", "r-NN, r=0.7", "k-NN, k=5", "SVM"
    ]
    # plt.plot(rnn04)
    # plt.plot(rnn05)
    # plt.plot(rnn07)
    # plt.plot(knn5)
    # plt.plot(svm)
    # # plt.ylim([0, 1])
    # plt.legend(labels)
    # plt.xlabel("fold")
    # plt.ylabel("accuracy")
    # plt.show()
    averages = [np.average(rnn04), np.average(rnn05), np.average(rnn07), np.average(knn5), np.average(svm)]
    plt.bar(x=np.arange(len(labels)), height=averages, tick_label=labels)
    for i, v in enumerate(averages):
        plt.text(i - 0.20, v + 0.01, str(round(v * 100, 2)) + '%', fontweight='bold')
    plt.show()


def plot_redes():
    inceptionResnet = [None, 0.07166851311922073, 0.020600654184818268, 0.008254185318946838, 0.0057941642589867115,
                       0.004577034618705511, 0.005718960426747799, 0.008889189921319485, 0.004560727626085281,
                       0.003967321012169123, 0.002845495706424117, 0.006015643011778593, 0.012800739146769047,
                       0.00800535548478365, 0.01061389409005642, 0.007312271744012833, 0.010694460943341255,
                       0.009485778398811817, 0.0074798534624278545, 0.025658603757619858, 0.009901662357151508]
    resnet50 = [None, 0.06097368896007538, 0.02758646383881569, 0.009589018300175667, 0.005645486526191235,
                0.0029524960555136204, 0.002041286788880825, 0.001974439015612006, 0.0012351310579106212,
                0.001015408313833177, 0.0003170700219925493, 0.000602880900260061, 0.0006247428245842457,
                0.0005324693629518151, 0.0007794290431775153, 0.0008590264478698373, 0.0009136929293163121,
                0.0005665141507051885, 0.00019893575517926365, 2.2057763999328017e-05, 0.00033914283267222345]
    xception = [None, 0.08053027838468552, 0.020560745149850845, 0.006372006144374609, 0.00229545752517879,
                0.0029103830456733704, 0.001361343776807189, 0.0009436921682208776, 0.00032286980422213674,
                0.00028234630008228123, 0.00013601288083009422, 0.00020199215214233845, 0.0006732463371008635,
                0.00027604252682067454, 0.00020284057245589793, 0.00020574350492097437, 0.0003372264909557998,
                0.0003438592830207199, 0.000142804448842071, 0.0008281551999971271, 0.0006306307623162866]
    val_inceptionResnet = [None, 0.1670040786266327, 0.08366994559764862, 0.03569931164383888, 0.024575015529990196,
                           0.010864590294659138, 0.1479049175977707, 0.06394441425800323, 0.032810259610414505,
                           0.007444177754223347, 0.0066721634939312935, 0.05813409388065338, 0.06683468073606491,
                           0.037134911864995956, 0.09244509786367416, 0.16494467854499817, 0.14519669115543365,
                           0.07983305305242538, 0.08155971020460129, 0.12023727595806122, 0.05014229565858841]
    val_resnet50 = [None, 0.19996263086795807, 0.1998896449804306, 0.19998466968536377, 0.19997842609882355,
                    0.19993719458580017,
                    0.19997335970401764, 0.1999417096376419, 0.1998441070318222, 0.1999267190694809,
                    0.19990764558315277,
                    0.1997818648815155, 0.19772495329380035, 0.1986009031534195, 0.19286882877349854,
                    0.1921619027853012,
                    0.19178399443626404, 0.1917533129453659, 0.1863688975572586, 0.18087854981422424,
                    0.17108777165412903]
    val_xception = [None, 0.09102369099855423, 0.026409868150949478, 0.008083416149020195, 0.0011376134352758527,
                    0.0013642129488289356, 0.00024504191242158413, 7.495080353692174e-05, 2.5290148641943233e-06,
                    0.0003526287036947906, 7.77479090174893e-06, 4.35239307989832e-05, 0.0005869058659300208,
                    0.0003662397793959826, 0.0004488127597142011, 0.0006067429203540087, 0.00025773057132028043,
                    0.0004249937483109534, 0.0007514512981288135, 0.0024771117605268955, 0.0010689441114664078]
    fig, ax = plt.subplots(1, 2)
    ax[0].plot(inceptionResnet)
    ax[0].plot(resnet50)
    ax[0].plot(xception)
    ax[0].legend(["Inception-ResNetV2", "ResNet50", "Xception"])
    ax[0].set_xlabel("epochs")
    ax[0].set_ylabel("loss")
    ax[1].plot(val_inceptionResnet)
    ax[1].plot(val_resnet50)
    ax[1].plot(val_xception)
    ax[1].legend(["Inception-ResNetV2", "ResNet50", "Xception"])
    ax[1].set_xlabel("epochs")
    ax[1].set_ylabel("val_loss")
    plt.show()


if __name__ == '__main__':
    # show_faces()
    # show_augmented()
    # plot_classifiers()
    # plot_redes()

    inception_resnet = Image.open("C:\\Users\\orlan\\Downloads\\distribuicao_inception_resnet.png")
    resnet = Image.open("C:\\Users\\orlan\\Downloads\\distribuicao_resnet.png")
    xception = Image.open("C:\\Users\\orlan\\Downloads\\distribuicao_xception.png")
    fig, ax = plt.subplots(1, 3)
    ax[0].imshow(inception_resnet)
    ax[0].axis('off')
    ax[1].imshow(resnet)
    ax[1].axis('off')
    ax[2].imshow(xception)
    ax[2].axis('off')
    plt.subplots_adjust(top=1, bottom=0, left=0, right=1, wspace=0, hspace=0)
    plt.show()
